2021.6.17~需求关系分析
            参照淘票票，设计影院售票系统

2021.6.18~SSM框架整合

2021.6.21~22影片列表展示
            使用jsp和jstl进行影片的展示

2021.6.23~影排片功能

            由用户选择，根据影片的film_id查询到影片的排片信息

            排片表paly：
                id    	主键（自增）  	bigint
                play_id	场次唯一id    	varchar
                play_time	放映时间	datetime
                lan_type	语言版本	varchar
                price	票价	decimal  （double）
                room_id	放映厅唯一id	varchar
                room_name	放映厅名字	varchar
                film_id	电影id	varchar

            影厅表room：
                id    	主键（自增）  	bigint
                room_id	放映厅唯一id    	varchar
                room_name	放映厅名字	varchar
                situation	座位分布	varchar

2021.6.24~mybatis-generator组件学习
            底层反射读取数据库，desc ，根据数据库中的信息字段，反射按规则写入文件；代码生成器；

            使用：
                引用generator的Maven依赖
                在resource文件夹中创建generatorConfig.xml配置文件
                使用Maven中的generator插件

                generatorConfig.xml详情：
                    <!DOCTYPE generatorConfiguration PUBLIC
                            "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
                            "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
                    <generatorConfiguration>
                        <context id="simple" targetRuntime="MyBatis3Simple">
                            <!--生成的java文件编码格式-->
                            <property name="javaFileEncoding" value="UTF-8"/>

                            <!--注释生成器-->
                            <commentGenerator>
                                <property name="suppressDate" value="true"/>
                                <property name="suppressAllComments" value="true"/>
                            </commentGenerator>

                            <!--数据库连接配置-->
                            <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                                            connectionURL="jdbc:mysql://localhost:3306/ssm"
                                            userId="root" password="123456"/>

                            <!--生成entity/domain对象-->
                            <javaModelGenerator targetPackage="com.duing.entity" targetProject="src/main/java"/>

                            <!--生成mapper文件-->
                            <sqlMapGenerator targetPackage="mappers" targetProject="src/main/resources"/>

                            <!--生成mapper接口/dao接口-->
                            <javaClientGenerator type="XMLMAPPER" targetPackage="com.duing.dao" targetProject="src/main/java"/>

                            <!--对应表名-->
                            <table tableName="room"/>
                        </context>
                    </generatorConfiguration>

2021.6.25~26订单功能和登录功能的概述

            订单功能：

                购票流程：
                        进入电影详情界面面——>点击购票——>跳转到购票的详情界面——>选择座位号（实际上是将座位号、选择的座位数量、影厅存入订单表中）


                订单功能——数据库订单表的设计：

                        id    	主键（自增）  	bigint
                        order_id	订单唯一id    	varchar
                        create_time	创建时间	datetime
                        price	金额	decimal
                        play_id	场次id	varchar
                        seat_num	座位数量	int
                        seat	具体座位	varchar
                        user_id	用户id	varchar

                         先将座位初始化信息返回   通过异步的方式（ajax）   获取已卖出的座位  再进行渲染

            登录功能：

                session和cookie的区别

                    session：存储在后端，存在于一次对话的请求过程

                    cookie：'小甜点',存储在客户端，每次请求都会携带cookie，相比于session而言，不安全；cookie是有有效期的；


                分布式session的概念

                    解决方案：session复制、粘性session、session共享

                对于登录方案，通过在html页面展示，通过Ajax异步请求，向数据库读取数据；

                对于取消登录功能，通过发送请求清除服务端的Session，实现目标

                         Enumeration em = request.getSession().getAttributeNames();
                                while(em.hasMoreElements()){
                                    request.getSession().removeAttribute(em.nextElement().toString());
                                }

2021.6.28~等于界面进行优化

            引入行内框架，减少代码的冗余，讲Main.jsp 的导航栏固定

            引入iframe标签

                <iframe src="Films"  scrolling="auto" frameborder="0"  height="100%" width="100%"></iframe>

            关闭原有的Main中的滚动条

                    <style>
                        #content{
                            overflow-y: scroll;
                            -ms-overflow-style:none;
                            scrollbar-width: none;
                        }
                        ::-webkit-scrollbar {
                            display: none;
                        }
                    </style>

